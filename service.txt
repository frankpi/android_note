需求：既要保证服务的长期在后台运行，又想去调用服务里面方法；
	 * 一般：线开启服务， 后绑定服务；
	 * 1,开启服务 startService() > onCreate() 
	 * 2,绑定服务 bindService() > onbind();
	 * 3，解绑服务，服务只能解绑一次，多次就报错
	 * 4，停止服务 stopService()



----------绑定远程服务的流程-----------

1，在activity 调用bindservice（）去绑定服务，
	bindService(intent, myConn, BIND_AUTO_CREATE);

2，在服务里面，需要重写方法 onBind() 在服务被绑定的时候 调用 返回一个IBinder 接口
	对象（代理人） 结构定义需要开车aidl 用自动生成的IService.stub
	代理人，必须要实现一个方法，这个方法可以调用到服务的方法；

3，在activity的onServiceConnected 得到中间人 使用aidl 自动生成IService 利用IService.stub.asInterface()

5，调用中间人方法

6，中间人调用服务的方法

一、 Service简介
Service是android 系统中的四大组件之一（Activity、Service、BroadcastReceiver、ContentProvider），它跟Activity的级别差不多，
但不能自己运行只能后台运行，并且可以和其他组件进行交互。service可以在很多场合的应用中使用，比如播放多媒体的时候用户启动了其他Activity这个时候程序要在后台继续播放，比如检测SD卡上文件的变化，再或者在后台记录你地理信息位置的改变等等，总之服务总是藏在后台的。
Service的启动有两种方式：context.startService() 和 context.bindService()

二、 Service启动流程
context.startService() 启动流程：
context.startService()  -> onCreate()  -> onStart()  -> Service running  -> context.stopService()  -> onDestroy()  -> Service stop 

如果Service还没有运行，则android先调用onCreate()，然后调用onStart()；
如果Service已经运行，则只调用onStart()，所以一个Service的onStart方法可能会重复调用多次。 
如果stopService的时候会直接onDestroy，如果是调用者自己直接退出而没有调用stopService的话，Service会一直在后台运行，该Service的调用者再启动起来后可以通过stopService关闭Service。
所以调用startService的生命周期为：onCreate --> onStart (可多次调用) --> onDestroy

context.bindService()启动流程：
context.bindService()  -> onCreate()  -> onBind()  -> Service running  -> onUnbind()  -> onDestroy()  -> Service stop
 
onBind()将返回给客户端一个IBind接口实例，IBind允许客户端回调服务的方法，比如得到Service的实例、运行状态或其他操作。这个时候把调用者（Context，例如Activity）会和Service绑定在一起，Context退出了，Srevice就会调用onUnbind->onDestroy相应退出。 
所以调用bindService的生命周期为：onCreate --> onBind(只一次，不可多次绑定) --> onUnbind --> onDestory。
在Service每一次的开启关闭过程中，只有onStart可被多次调用(通过多次startService调用)，其他onCreate，onBind，onUnbind，onDestory在一个生命周期中只能被调用一次。
 

三、 Service生命周期 
Service的生命周期并不像Activity那么复杂，它只继承了onCreate()、onStart()、onDestroy()三个方法
当我们第一次启动Service时，先后调用了onCreate()、onStart()这两个方法；当停止Service时，则执行onDestroy()方法。
这里需要注意的是，如果Service已经启动了，当我们再次启动Service时，不会在执行onCreate()方法，而是直接执行onStart()方法。
它可以通过Service.stopSelf()方法或者Service.stopSelfResult()方法来停止自己，只要调用一次stopService()方法便可以停止服务，无论调用了多少次的启动服务方法。
